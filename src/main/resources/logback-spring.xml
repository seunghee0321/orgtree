<?xml version="1.0" encoding="UTF-8"?>

<!-- 60초마다 설정 파일의 변경을 확인 하여 변경시 갱신 --> 
<configuration scan="true" scanPeriod="60 seconds">

	<!--springProfile 태그를 사용하면 logback 설정파일에서 복수개의 프로파일을 설정할 수 있다.-->
	<springProfile name="local">
		<property resource="logback-local.properties"/>
	</springProfile>
	<springProfile name="dev">
		<property resource="logback-dev.properties"/>
	</springProfile>
	<springProfile name="prod">
		<property resource="logback-prod.properties"/>
	</springProfile>

	<!--Environment 내의 프로퍼티들을 개별적으로 설정할 수도 있다.-->
<!-- 	<springProperty scope="context" name="ROOT_LOG_LEVEL" source="logging.level.root"/> -->
<!-- 	<springProperty scope="context" name="PKG_LOG_LEVEL" source="logging.level.com.dbinc"/> -->

	<!-- log level -->
	<property name="ROOT_LOG_LEVEL" value="${logging.level.root}"/>
	<property name="PKG_LOG_LEVEL" value="${logging.level.com.dbinc}"/>
	
	<!-- log file path --> 
	<property name="LOG_PATH" value="${log.config.path}"/>
	
	<!-- log file name --> 
	<property name="LOG_FILE_NAME" value="${log.config.filename}"/>

	<!-- err log file name --> 
	<property name="ERR_LOG_FILE_NAME" value="err_log"/> 
	
	<!-- pattern --> 
	<property name="LOG_PATTERN" value="%-5level %d{yy-MM-dd HH:mm:ss}[%thread] [%logger{0}:%line] - %msg%n"/>

	<!-- Console Appender --> 
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender"> 
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"> 
			<pattern>${LOG_PATTERN}</pattern> 
		</encoder> 
	</appender>
	
	<!-- File Appender --> 
	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender"> 
		
		<!-- 파일경로 설정 -->
		<file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>
		
		<!-- 출력패턴 설정--> 
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"> 
			<pattern>${LOG_PATTERN}</pattern> 
		</encoder> 
		
<!--		&lt;!&ndash; Rolling 정책 &ndash;&gt;-->
<!--		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->

<!--			&lt;!&ndash; .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 &ndash;&gt;-->
<!--			<fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>-->
<!--			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">-->
<!--				&lt;!&ndash; 파일당 최고 용량 kb, mb, gb &ndash;&gt;-->
<!--				<maxFileSize>10MB</maxFileSize>-->
<!--			</timeBasedFileNamingAndTriggeringPolicy>-->

<!--			&lt;!&ndash; 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거&ndash;&gt;-->
<!--			<maxHistory>3</maxHistory>-->

<!--			&lt;!&ndash;<MinIndex>1</MinIndex> <MaxIndex>10</MaxIndex>&ndash;&gt;-->
<!--		</rollingPolicy>-->

		<!--	1/21 수정	-->
		<!-- 파일경로 설정 -->
		<file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>

		<!-- 출력패턴 설정 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
		</encoder>

		<!-- Rolling 정책 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!-- 파일 이름 패턴 -->
			<fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>

			<!-- 파일당 최대 크기 -->
			<maxFileSize>10MB</maxFileSize>

			<!-- 보관 주기 (일 단위) -->
			<maxHistory>3</maxHistory>
		</rollingPolicy>
	</appender>
	
	
	<!-- 에러의 경우 파일에 로그 처리 --> 
	<appender name="Error" class="ch.qos.logback.core.rolling.RollingFileAppender"> 
<!--		<filter class="ch.qos.logback.classic.filter.LevelFilter"> -->
<!--			<level>error</level> -->
<!--			<onMatch>ACCEPT</onMatch> -->
<!--			<onMismatch>DENY</onMismatch> -->
<!--		</filter> -->
<!--		<file>${LOG_PATH}/${ERR_LOG_FILE_NAME}.log</file> -->
<!--		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"> -->
<!--			<pattern>${LOG_PATTERN}</pattern> -->
<!--		</encoder> -->
<!--		-->
<!--		&lt;!&ndash; Rolling 정책 &ndash;&gt; -->
<!--		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> -->
<!--		-->
<!--			&lt;!&ndash; .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 &ndash;&gt; -->
<!--			<fileNamePattern>${LOG_PATH}/${ERR_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern> -->
<!--			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">-->
<!--			-->
<!--				&lt;!&ndash; 파일당 최고 용량 kb, mb, gb &ndash;&gt; -->
<!--				<maxFileSize>10MB</maxFileSize> -->
<!--			</timeBasedFileNamingAndTriggeringPolicy> -->
<!--			-->
<!--			&lt;!&ndash; 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거&ndash;&gt; -->
<!--			<maxHistory>60</maxHistory> -->
<!--		</rollingPolicy> -->
		<!--		1/21 수정		-->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>error</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<file>${LOG_PATH}/${ERR_LOG_FILE_NAME}.log</file>

		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
		</encoder>

		<!-- Rolling 정책 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!-- 파일 이름 패턴 -->
			<fileNamePattern>${LOG_PATH}/${ERR_LOG_FILE_NAME}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>

			<!-- 파일당 최대 크기 -->
			<maxFileSize>10MB</maxFileSize>

			<!-- 보관 주기 (일 단위) -->
			<maxHistory>60</maxHistory>
		</rollingPolicy>
	</appender>

	<!-- log4jdbc 옵션 설정 --> 
	<logger name="jdbc" level="OFF"/> 
	<logger name="jdbc.connection" level="OFF"/> 
	<logger name="jdbc.sqlonly" level="OFF"/> 
	<logger name="jdbc.sqltiming" level="DEBUG"/> 
	<logger name="jdbc.audit" level="OFF"/> 
	<logger name="jdbc.resultset" level="OFF"/> 
	<logger name="jdbc.resultsettable" level="DEBUG"/>

	<!-- root레벨 설정 --> 
	<root level="${ROOT_LOG_LEVEL}"> 
		<appender-ref ref="CONSOLE"/> 
		<appender-ref ref="FILE"/> 
		<appender-ref ref="Error"/> 
	</root>

	<!-- 개발패키지 로깅레벨 설정 --> 
	<logger name="com.dbinc.cloudoffice.orgtree" level="${PKG_LOG_LEVEL}" additivity="false"> 
		<appender-ref ref="CONSOLE"/> 
		<appender-ref ref="FILE"/> 
		<appender-ref ref="Error"/> 
	</logger>

</configuration>




















